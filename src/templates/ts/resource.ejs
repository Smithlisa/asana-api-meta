<%
var thisType = plural(cap(resource.name));

function paramNameInComment(param) {
  return param.required ? param.name : ('[' + param.name + ']');
}
%>
/**
 * This file is auto-generated by the `asana-api-meta` NodeJS package.
 * We try to keep the generated code pretty clean but there will be lint
 * errors that are just not worth fixing (like unused requires).
 */
var Resource = require('../resource');
var _ = require('lodash');

/**
<%= comment(resource.comment) %>
 */
export class <%= thisType %> extends Resource {
  constructor(dispatcher : Dispatcher) { super(dispatcher); }

<%
for (let action of resource.actions) {
  if (action.no_code) {
    continue;
  }

  var isGet = action.method === 'GET';
  var optionParams = [];
  var requestOptionsParamName = null;
  var dispatchName = 'dispatch' + cap(action.method);

  if (isGet) {
    optionParams.push({
      name: 'params',
      type: 'Object',
      comment: 'Parameters for the request'
    });
    requestOptionsParamName = 'params';
    if (action.collection) {
      dispatchName = 'dispatchGetCollection';
    }
  } else if (action.method !== 'DELETE') {
    optionParams.push({
      name: 'data',
      type: 'Object',
      comment: 'Data for the request',
      required: true
    });
    requestOptionsParamName = 'data';
  }

  // Figure out how many params will be consumed by the path and put the
  // first N required params there - the rest go in options.
  var numPathParams = (action.path.match(/%/g) || []).length;
  var pathParams = [];
  var explicitNonPathParams = [];
  var optionChildParams = [];
  if (action.params) {
    action.params.forEach(function(param, index) {
      if (param.required && pathParams.length < numPathParams) {
        pathParams.push(param);
      } else if (param.explicit) {
        explicitNonPathParams.push(param);
      } else {
        optionChildParams.push(
            _.extend({}, param, {
                name: requestOptionsParamName + '.' + param.name
            }));
      }
    });
  }

  // This includes the params that go on the path plus the request data param
  // and the dispatchOptions param.
  var explicitParams = pathParams
      .concat(explicitNonPathParams)
      .concat(optionParams);
  var allOrderedParams = explicitParams
      .concat(optionChildParams);

  // Add a dispatchOptions as the last param to every method.
  var dispatchOptionsParam = {
    name: 'dispatchOptions',
    type: 'Object',
    comment: 'Options, if any, to pass the dispatcher for the request'
  };
  explicitParams.push(dispatchOptionsParam);
  allOrderedParams.push(dispatchOptionsParam);

%>
  /**
  <%= comment(action.comment) %>
  <% _.forEach(allOrderedParams, function(param) { %><%= comment(
            '@param {' + typeName(param.type) + '} ' + paramNameInComment(param) + ' ' + param.comment, 2) %>
  <% }); %><%= comment(
      '@return {Promise} ' +
          ((isGet && !action.collection) ?
              'The requested resource' :
              'The response from the API'), 2) %>
   */
  function <%= action.name %>(
<%
  _.forEach(explicitParams, function(param, i) {
%>        <%= param.name %> : <%= param.type %><% if (i !== explicitParams.length - 1) { %>,
<% }
  })
%>) {
    var path = util.format('<%= action.path %>'<% _.forEach(pathParams, function(param) { %>, <%= param.name %><% }); %>);
<%  if (explicitNonPathParams.length > 0) { %>
    <%= requestOptionsParamName %> = _.extend({}, <%= requestOptionsParamName %> || {}, {<% _.forEach(explicitNonPathParams, function(npp, npp_index) { %>
      <%= npp.name %>: <%= npp.name %><%= npp_index !== explicitNonPathParams.length - 1 ? "," : "" %><% }); %>
    });<% } %>
    return this.<%= dispatchName %>(path<%= requestOptionsParamName ? (', ' + requestOptionsParamName) : ''%>, dispatchOptions);
  };
<% } %>
};
